{"ast":null,"code":"import escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\nimport findFocusedRoute from './findFocusedRoute';\nimport validatePathConfig from './validatePathConfig';\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath(path, options) {\n  if (options) {\n    validatePathConfig(options);\n  }\n  let initialRoutes = [];\n  if (options !== null && options !== void 0 && options.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: []\n    });\n  }\n  const screens = options === null || options === void 0 ? void 0 : options.screens;\n  let remaining = path.replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n  .replace(/^\\//, '') // Remove extra leading slash\n  .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining.split('/').filter(Boolean).map(segment => {\n      const name = decodeURIComponent(segment);\n      return {\n        name\n      };\n    });\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(key, screens, [], initialRoutes, []))).sort((a, b) => {\n    // Sort config so that:\n    // - the most exhaustive ones are always at the beginning\n    // - patterns with wildcard are always at the end\n\n    // If 2 patterns are same, move the one with less route names up\n    // This is an error state, so it's only useful for consistent error messages\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    }\n\n    // If one of the patterns starts with the other, it's more exhaustive\n    // So move it up\n    if (a.pattern.startsWith(b.pattern)) {\n      return -1;\n    }\n    if (b.pattern.startsWith(a.pattern)) {\n      return 1;\n    }\n    const aParts = a.pattern.split('/');\n    const bParts = b.pattern.split('/');\n    for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n      // if b is longer, b get higher priority\n      if (aParts[i] == null) {\n        return 1;\n      }\n      // if a is longer, a get higher priority\n      if (bParts[i] == null) {\n        return -1;\n      }\n      const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n      const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n      // if both are wildcard we compare next component\n      if (aWildCard && bWildCard) {\n        continue;\n      }\n      // if only a is wild card, b get higher priority\n      if (aWildCard) {\n        return 1;\n      }\n      // if only b is wild card, a get higher priority\n      if (bWildCard) {\n        return -1;\n      }\n    }\n    return bParts.length - aParts.length;\n  });\n\n  // Check for duplicate patterns in the config\n  configs.reduce((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n      if (!intersects) {\n        throw new Error(`Found conflicting screens with the same pattern. The pattern '${config.pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n      }\n    }\n    return Object.assign(acc, {\n      [config.pattern]: config\n    });\n  }, {});\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(config => config.path === '' && config.routeNames.every(\n    // Make sure that none of the parent configs have a non-empty path defined\n    name => {\n      var _configs$find;\n      return !((_configs$find = configs.find(c => c.screen === name)) !== null && _configs$find !== void 0 && _configs$find.path);\n    }));\n    if (match) {\n      return createNestedStateObject(path, match.routeNames.map(name => ({\n        name\n      })), initialRoutes, configs);\n    }\n    return undefined;\n  }\n  let result;\n  let current;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const {\n    routes,\n    remainingPath\n  } = matchAgainstConfigs(remaining, configs.map(c => ({\n    ...c,\n    // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n    regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n  })));\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n  if (current == null || result == null) {\n    return undefined;\n  }\n  return result;\n}\nconst joinPaths = function () {\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n};\nconst matchAgainstConfigs = (remaining, configs) => {\n  let routes;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      var _config$pattern;\n      const matchedParams = (_config$pattern = config.pattern) === null || _config$pattern === void 0 ? void 0 : _config$pattern.split('/').filter(p => p.startsWith(':')).reduce((acc, p, i) => Object.assign(acc, {\n        // The param segments appear every second item starting from 2 in the regex match result\n        [p]: match[(i + 1) * 2].replace(/\\//, '')\n      }), {});\n      routes = config.routeNames.map(name => {\n        var _config$path;\n        const config = configs.find(c => c.screen === name);\n        const params = config === null || config === void 0 ? void 0 : (_config$path = config.path) === null || _config$path === void 0 ? void 0 : _config$path.split('/').filter(p => p.startsWith(':')).reduce((acc, p) => {\n          const value = matchedParams[p];\n          if (value) {\n            var _config$parse;\n            const key = p.replace(/^:/, '').replace(/\\?$/, '');\n            acc[key] = (_config$parse = config.parse) !== null && _config$parse !== void 0 && _config$parse[key] ? config.parse[key](value) : value;\n          }\n          return acc;\n        }, {});\n        if (params && Object.keys(params).length) {\n          return {\n            name,\n            params\n          };\n        }\n        return {\n          name\n        };\n      });\n      remainingPath = remainingPath.replace(match[1], '');\n      break;\n    }\n  }\n  return {\n    routes,\n    remainingPath\n  };\n};\nconst createNormalizedConfigs = function (screen, routeConfig) {\n  let routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let initials = arguments.length > 3 ? arguments[3] : undefined;\n  let parentScreens = arguments.length > 4 ? arguments[4] : undefined;\n  let parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n  const configs = [];\n  routeNames.push(screen);\n  parentScreens.push(screen);\n\n  // @ts-expect-error: we can't strongly typecheck this for now\n  const config = routeConfig[screen];\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n      }\n      pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      configs.push(createConfigItem(screen, routeNames, pattern, config.path, config.parse));\n    }\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens\n        });\n      }\n      Object.keys(config.screens).forEach(nestedConfig => {\n        const result = createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, [...parentScreens], pattern ?? parentPattern);\n        configs.push(...result);\n      });\n    }\n  }\n  routeNames.pop();\n  return configs;\n};\nconst createConfigItem = (screen, routeNames, pattern, path, parse) => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  const regex = pattern ? new RegExp(`^(${pattern.split('/').map(it => {\n    if (it.startsWith(':')) {\n      return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n    }\n    return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n  }).join('')})`) : undefined;\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse\n  };\n};\nconst findParseConfigForRoute = (routeName, flatConfig) => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (initialRoute, route, isEmpty) => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, route]\n      };\n    } else {\n      return {\n        routes: [route]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, {\n          ...route,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    } else {\n      return {\n        routes: [{\n          ...route,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    }\n  }\n};\nconst createNestedStateObject = (path, routes, initialRoutes, flatConfig) => {\n  let state;\n  let route = routes.shift();\n  const parentScreens = [];\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n  parentScreens.push(route.name);\n  state = createStateObject(initialRoute, route, routes.length === 0);\n  if (routes.length > 0) {\n    let nestedState = state;\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n      const nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n      parentScreens.push(route.name);\n    }\n  }\n  route = findFocusedRoute(state);\n  route.path = path;\n  const params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n  if (params) {\n    route.params = {\n      ...route.params,\n      ...params\n    };\n  }\n  return state;\n};\nconst parseQueryParams = (path, parseConfig) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n  if (parseConfig) {\n    Object.keys(params).forEach(name => {\n      if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n  return Object.keys(params).length ? params : undefined;\n};","map":{"version":3,"names":["escape","queryString","findFocusedRoute","validatePathConfig","getStateFromPath","path","options","initialRoutes","initialRouteName","push","parentScreens","screens","remaining","replace","endsWith","undefined","routes","split","filter","Boolean","map","segment","name","decodeURIComponent","length","createNestedStateObject","configs","concat","Object","keys","key","createNormalizedConfigs","sort","a","b","pattern","routeNames","join","localeCompare","startsWith","aParts","bParts","i","Math","max","aWildCard","bWildCard","reduce","acc","config","intersects","every","it","Error","assign","match","find","_configs$find","c","screen","result","current","remainingPath","matchAgainstConfigs","regex","RegExp","source","joinPaths","_len","arguments","paths","Array","_key","p","_config$pattern","matchedParams","_config$path","params","value","_config$parse","parse","routeConfig","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","pop","findParseConfigForRoute","routeName","flatConfig","findInitialRoute","sameParents","createStateObject","initialRoute","route","isEmpty","index","state","shift","nestedState","nestedStateIndex","parseQueryParams","parseConfig","query","hasOwnProperty","call"],"sources":["C:/Users/marci/Interpretes-de-Libras-2/node_modules/@react-navigation/core/lib/module/getStateFromPath.js"],"sourcesContent":["import escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\nimport findFocusedRoute from './findFocusedRoute';\nimport validatePathConfig from './validatePathConfig';\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath(path, options) {\n  if (options) {\n    validatePathConfig(options);\n  }\n  let initialRoutes = [];\n  if (options !== null && options !== void 0 && options.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: []\n    });\n  }\n  const screens = options === null || options === void 0 ? void 0 : options.screens;\n  let remaining = path.replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n  .replace(/^\\//, '') // Remove extra leading slash\n  .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining.split('/').filter(Boolean).map(segment => {\n      const name = decodeURIComponent(segment);\n      return {\n        name\n      };\n    });\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(key, screens, [], initialRoutes, []))).sort((a, b) => {\n    // Sort config so that:\n    // - the most exhaustive ones are always at the beginning\n    // - patterns with wildcard are always at the end\n\n    // If 2 patterns are same, move the one with less route names up\n    // This is an error state, so it's only useful for consistent error messages\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    }\n\n    // If one of the patterns starts with the other, it's more exhaustive\n    // So move it up\n    if (a.pattern.startsWith(b.pattern)) {\n      return -1;\n    }\n    if (b.pattern.startsWith(a.pattern)) {\n      return 1;\n    }\n    const aParts = a.pattern.split('/');\n    const bParts = b.pattern.split('/');\n    for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n      // if b is longer, b get higher priority\n      if (aParts[i] == null) {\n        return 1;\n      }\n      // if a is longer, a get higher priority\n      if (bParts[i] == null) {\n        return -1;\n      }\n      const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n      const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n      // if both are wildcard we compare next component\n      if (aWildCard && bWildCard) {\n        continue;\n      }\n      // if only a is wild card, b get higher priority\n      if (aWildCard) {\n        return 1;\n      }\n      // if only b is wild card, a get higher priority\n      if (bWildCard) {\n        return -1;\n      }\n    }\n    return bParts.length - aParts.length;\n  });\n\n  // Check for duplicate patterns in the config\n  configs.reduce((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n      if (!intersects) {\n        throw new Error(`Found conflicting screens with the same pattern. The pattern '${config.pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n      }\n    }\n    return Object.assign(acc, {\n      [config.pattern]: config\n    });\n  }, {});\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(config => config.path === '' && config.routeNames.every(\n    // Make sure that none of the parent configs have a non-empty path defined\n    name => {\n      var _configs$find;\n      return !((_configs$find = configs.find(c => c.screen === name)) !== null && _configs$find !== void 0 && _configs$find.path);\n    }));\n    if (match) {\n      return createNestedStateObject(path, match.routeNames.map(name => ({\n        name\n      })), initialRoutes, configs);\n    }\n    return undefined;\n  }\n  let result;\n  let current;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const {\n    routes,\n    remainingPath\n  } = matchAgainstConfigs(remaining, configs.map(c => ({\n    ...c,\n    // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n    regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n  })));\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n  if (current == null || result == null) {\n    return undefined;\n  }\n  return result;\n}\nconst joinPaths = function () {\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n};\nconst matchAgainstConfigs = (remaining, configs) => {\n  let routes;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      var _config$pattern;\n      const matchedParams = (_config$pattern = config.pattern) === null || _config$pattern === void 0 ? void 0 : _config$pattern.split('/').filter(p => p.startsWith(':')).reduce((acc, p, i) => Object.assign(acc, {\n        // The param segments appear every second item starting from 2 in the regex match result\n        [p]: match[(i + 1) * 2].replace(/\\//, '')\n      }), {});\n      routes = config.routeNames.map(name => {\n        var _config$path;\n        const config = configs.find(c => c.screen === name);\n        const params = config === null || config === void 0 ? void 0 : (_config$path = config.path) === null || _config$path === void 0 ? void 0 : _config$path.split('/').filter(p => p.startsWith(':')).reduce((acc, p) => {\n          const value = matchedParams[p];\n          if (value) {\n            var _config$parse;\n            const key = p.replace(/^:/, '').replace(/\\?$/, '');\n            acc[key] = (_config$parse = config.parse) !== null && _config$parse !== void 0 && _config$parse[key] ? config.parse[key](value) : value;\n          }\n          return acc;\n        }, {});\n        if (params && Object.keys(params).length) {\n          return {\n            name,\n            params\n          };\n        }\n        return {\n          name\n        };\n      });\n      remainingPath = remainingPath.replace(match[1], '');\n      break;\n    }\n  }\n  return {\n    routes,\n    remainingPath\n  };\n};\nconst createNormalizedConfigs = function (screen, routeConfig) {\n  let routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let initials = arguments.length > 3 ? arguments[3] : undefined;\n  let parentScreens = arguments.length > 4 ? arguments[4] : undefined;\n  let parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n  const configs = [];\n  routeNames.push(screen);\n  parentScreens.push(screen);\n\n  // @ts-expect-error: we can't strongly typecheck this for now\n  const config = routeConfig[screen];\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n      }\n      pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      configs.push(createConfigItem(screen, routeNames, pattern, config.path, config.parse));\n    }\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens\n        });\n      }\n      Object.keys(config.screens).forEach(nestedConfig => {\n        const result = createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, [...parentScreens], pattern ?? parentPattern);\n        configs.push(...result);\n      });\n    }\n  }\n  routeNames.pop();\n  return configs;\n};\nconst createConfigItem = (screen, routeNames, pattern, path, parse) => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  const regex = pattern ? new RegExp(`^(${pattern.split('/').map(it => {\n    if (it.startsWith(':')) {\n      return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n    }\n    return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n  }).join('')})`) : undefined;\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse\n  };\n};\nconst findParseConfigForRoute = (routeName, flatConfig) => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (initialRoute, route, isEmpty) => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, route]\n      };\n    } else {\n      return {\n        routes: [route]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, {\n          ...route,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    } else {\n      return {\n        routes: [{\n          ...route,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    }\n  }\n};\nconst createNestedStateObject = (path, routes, initialRoutes, flatConfig) => {\n  let state;\n  let route = routes.shift();\n  const parentScreens = [];\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n  parentScreens.push(route.name);\n  state = createStateObject(initialRoute, route, routes.length === 0);\n  if (routes.length > 0) {\n    let nestedState = state;\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n      const nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n      parentScreens.push(route.name);\n    }\n  }\n  route = findFocusedRoute(state);\n  route.path = path;\n  const params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n  if (params) {\n    route.params = {\n      ...route.params,\n      ...params\n    };\n  }\n  return state;\n};\nconst parseQueryParams = (path, parseConfig) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n  if (parseConfig) {\n    Object.keys(params).forEach(name => {\n      if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n  return Object.keys(params).length ? params : undefined;\n};\n//# sourceMappingURL=getStateFromPath.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}