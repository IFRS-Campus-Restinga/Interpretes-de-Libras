{"ast":null,"code":"import { CHILD_STATE } from './useRouteCache';\nexport default function getFocusedRouteNameFromRoute(route) {\n  // @ts-expect-error: this isn't in type definitions coz we want this private\n  const state = route[CHILD_STATE] ?? route.state;\n  const params = route.params;\n  const routeName = state ?\n  // Get the currently active route name in the nested navigator\n  state.routes[\n  // If we have a partial state without index, for tab/drawer, first screen will be focused one, and last for stack\n  // The type property will only exist for rehydrated state and not for state from deep link\n  state.index ?? (typeof state.type === 'string' && state.type !== 'stack' ? 0 : state.routes.length - 1)].name :\n  // If state doesn't exist, we need to default to `screen` param if available\n  typeof (params === null || params === void 0 ? void 0 : params.screen) === 'string' ? params.screen : undefined;\n  return routeName;\n}","map":{"version":3,"names":["CHILD_STATE","getFocusedRouteNameFromRoute","route","state","params","routeName","routes","index","type","length","name","screen","undefined"],"sources":["C:/Users/marci/Interpretes-de-Libras-2/node_modules/@react-navigation/core/lib/module/getFocusedRouteNameFromRoute.js"],"sourcesContent":["import { CHILD_STATE } from './useRouteCache';\nexport default function getFocusedRouteNameFromRoute(route) {\n  // @ts-expect-error: this isn't in type definitions coz we want this private\n  const state = route[CHILD_STATE] ?? route.state;\n  const params = route.params;\n  const routeName = state ?\n  // Get the currently active route name in the nested navigator\n  state.routes[\n  // If we have a partial state without index, for tab/drawer, first screen will be focused one, and last for stack\n  // The type property will only exist for rehydrated state and not for state from deep link\n  state.index ?? (typeof state.type === 'string' && state.type !== 'stack' ? 0 : state.routes.length - 1)].name :\n  // If state doesn't exist, we need to default to `screen` param if available\n  typeof (params === null || params === void 0 ? void 0 : params.screen) === 'string' ? params.screen : undefined;\n  return routeName;\n}\n//# sourceMappingURL=getFocusedRouteNameFromRoute.js.map"],"mappings":"AAAA,SAASA,WAAW,QAAQ,iBAAiB;AAC7C,eAAe,SAASC,4BAA4BA,CAACC,KAAK,EAAE;EAC1D;EACA,MAAMC,KAAK,GAAGD,KAAK,CAACF,WAAW,CAAC,IAAIE,KAAK,CAACC,KAAK;EAC/C,MAAMC,MAAM,GAAGF,KAAK,CAACE,MAAM;EAC3B,MAAMC,SAAS,GAAGF,KAAK;EACvB;EACAA,KAAK,CAACG,MAAM;EACZ;EACA;EACAH,KAAK,CAACI,KAAK,KAAK,OAAOJ,KAAK,CAACK,IAAI,KAAK,QAAQ,IAAIL,KAAK,CAACK,IAAI,KAAK,OAAO,GAAG,CAAC,GAAGL,KAAK,CAACG,MAAM,CAACG,MAAM,GAAG,CAAC,CAAC,CAAC,CAACC,IAAI;EAC7G;EACA,QAAQN,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACO,MAAM,CAAC,KAAK,QAAQ,GAAGP,MAAM,CAACO,MAAM,GAAGC,SAAS;EAC/G,OAAOP,SAAS;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}