{"ast":null,"code":"import * as React from 'react';\nconst UNINTIALIZED_STATE = {};\n\n/**\n * This is definitely not compatible with concurrent mode, but we don't have a solution for sync state yet.\n */\nexport default function useSyncState(initialState) {\n  const stateRef = React.useRef(UNINTIALIZED_STATE);\n  const isSchedulingRef = React.useRef(false);\n  const isMountedRef = React.useRef(true);\n  React.useEffect(() => {\n    isMountedRef.current = true;\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n  if (stateRef.current === UNINTIALIZED_STATE) {\n    stateRef.current =\n    // @ts-expect-error: initialState is a function, but TypeScript doesn't think so\n    typeof initialState === 'function' ? initialState() : initialState;\n  }\n  const [trackingState, setTrackingState] = React.useState(stateRef.current);\n  const getState = React.useCallback(() => stateRef.current, []);\n  const setState = React.useCallback(state => {\n    if (state === stateRef.current || !isMountedRef.current) {\n      return;\n    }\n    stateRef.current = state;\n    if (!isSchedulingRef.current) {\n      setTrackingState(state);\n    }\n  }, []);\n  const scheduleUpdate = React.useCallback(callback => {\n    isSchedulingRef.current = true;\n    try {\n      callback();\n    } finally {\n      isSchedulingRef.current = false;\n    }\n  }, []);\n  const flushUpdates = React.useCallback(() => {\n    if (!isMountedRef.current) {\n      return;\n    }\n\n    // Make sure that the tracking state is up-to-date.\n    // We call it unconditionally, but React should skip the update if state is unchanged.\n    setTrackingState(stateRef.current);\n  }, []);\n\n  // If we're rendering and the tracking state is out of date, update it immediately\n  // This will make sure that our updates are applied as early as possible.\n  if (trackingState !== stateRef.current) {\n    setTrackingState(stateRef.current);\n  }\n  const state = stateRef.current;\n  React.useDebugValue(state);\n  return [state, getState, setState, scheduleUpdate, flushUpdates];\n}","map":{"version":3,"names":["React","UNINTIALIZED_STATE","useSyncState","initialState","stateRef","useRef","isSchedulingRef","isMountedRef","useEffect","current","trackingState","setTrackingState","useState","getState","useCallback","setState","state","scheduleUpdate","callback","flushUpdates","useDebugValue"],"sources":["C:/Users/marci/Interpretes-de-Libras-2/node_modules/@react-navigation/core/lib/module/useSyncState.js"],"sourcesContent":["import * as React from 'react';\nconst UNINTIALIZED_STATE = {};\n\n/**\n * This is definitely not compatible with concurrent mode, but we don't have a solution for sync state yet.\n */\nexport default function useSyncState(initialState) {\n  const stateRef = React.useRef(UNINTIALIZED_STATE);\n  const isSchedulingRef = React.useRef(false);\n  const isMountedRef = React.useRef(true);\n  React.useEffect(() => {\n    isMountedRef.current = true;\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n  if (stateRef.current === UNINTIALIZED_STATE) {\n    stateRef.current =\n    // @ts-expect-error: initialState is a function, but TypeScript doesn't think so\n    typeof initialState === 'function' ? initialState() : initialState;\n  }\n  const [trackingState, setTrackingState] = React.useState(stateRef.current);\n  const getState = React.useCallback(() => stateRef.current, []);\n  const setState = React.useCallback(state => {\n    if (state === stateRef.current || !isMountedRef.current) {\n      return;\n    }\n    stateRef.current = state;\n    if (!isSchedulingRef.current) {\n      setTrackingState(state);\n    }\n  }, []);\n  const scheduleUpdate = React.useCallback(callback => {\n    isSchedulingRef.current = true;\n    try {\n      callback();\n    } finally {\n      isSchedulingRef.current = false;\n    }\n  }, []);\n  const flushUpdates = React.useCallback(() => {\n    if (!isMountedRef.current) {\n      return;\n    }\n\n    // Make sure that the tracking state is up-to-date.\n    // We call it unconditionally, but React should skip the update if state is unchanged.\n    setTrackingState(stateRef.current);\n  }, []);\n\n  // If we're rendering and the tracking state is out of date, update it immediately\n  // This will make sure that our updates are applied as early as possible.\n  if (trackingState !== stateRef.current) {\n    setTrackingState(stateRef.current);\n  }\n  const state = stateRef.current;\n  React.useDebugValue(state);\n  return [state, getState, setState, scheduleUpdate, flushUpdates];\n}\n//# sourceMappingURL=useSyncState.js.map"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,MAAMC,kBAAkB,GAAG,CAAC,CAAC;;AAE7B;AACA;AACA;AACA,eAAe,SAASC,YAAYA,CAACC,YAAY,EAAE;EACjD,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAM,CAACJ,kBAAkB,CAAC;EACjD,MAAMK,eAAe,GAAGN,KAAK,CAACK,MAAM,CAAC,KAAK,CAAC;EAC3C,MAAME,YAAY,GAAGP,KAAK,CAACK,MAAM,CAAC,IAAI,CAAC;EACvCL,KAAK,CAACQ,SAAS,CAAC,MAAM;IACpBD,YAAY,CAACE,OAAO,GAAG,IAAI;IAC3B,OAAO,MAAM;MACXF,YAAY,CAACE,OAAO,GAAG,KAAK;IAC9B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EACN,IAAIL,QAAQ,CAACK,OAAO,KAAKR,kBAAkB,EAAE;IAC3CG,QAAQ,CAACK,OAAO;IAChB;IACA,OAAON,YAAY,KAAK,UAAU,GAAGA,YAAY,CAAC,CAAC,GAAGA,YAAY;EACpE;EACA,MAAM,CAACO,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,KAAK,CAACY,QAAQ,CAACR,QAAQ,CAACK,OAAO,CAAC;EAC1E,MAAMI,QAAQ,GAAGb,KAAK,CAACc,WAAW,CAAC,MAAMV,QAAQ,CAACK,OAAO,EAAE,EAAE,CAAC;EAC9D,MAAMM,QAAQ,GAAGf,KAAK,CAACc,WAAW,CAACE,KAAK,IAAI;IAC1C,IAAIA,KAAK,KAAKZ,QAAQ,CAACK,OAAO,IAAI,CAACF,YAAY,CAACE,OAAO,EAAE;MACvD;IACF;IACAL,QAAQ,CAACK,OAAO,GAAGO,KAAK;IACxB,IAAI,CAACV,eAAe,CAACG,OAAO,EAAE;MAC5BE,gBAAgB,CAACK,KAAK,CAAC;IACzB;EACF,CAAC,EAAE,EAAE,CAAC;EACN,MAAMC,cAAc,GAAGjB,KAAK,CAACc,WAAW,CAACI,QAAQ,IAAI;IACnDZ,eAAe,CAACG,OAAO,GAAG,IAAI;IAC9B,IAAI;MACFS,QAAQ,CAAC,CAAC;IACZ,CAAC,SAAS;MACRZ,eAAe,CAACG,OAAO,GAAG,KAAK;IACjC;EACF,CAAC,EAAE,EAAE,CAAC;EACN,MAAMU,YAAY,GAAGnB,KAAK,CAACc,WAAW,CAAC,MAAM;IAC3C,IAAI,CAACP,YAAY,CAACE,OAAO,EAAE;MACzB;IACF;;IAEA;IACA;IACAE,gBAAgB,CAACP,QAAQ,CAACK,OAAO,CAAC;EACpC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA,IAAIC,aAAa,KAAKN,QAAQ,CAACK,OAAO,EAAE;IACtCE,gBAAgB,CAACP,QAAQ,CAACK,OAAO,CAAC;EACpC;EACA,MAAMO,KAAK,GAAGZ,QAAQ,CAACK,OAAO;EAC9BT,KAAK,CAACoB,aAAa,CAACJ,KAAK,CAAC;EAC1B,OAAO,CAACA,KAAK,EAAEH,QAAQ,EAAEE,QAAQ,EAAEE,cAAc,EAAEE,YAAY,CAAC;AAClE"},"metadata":{},"sourceType":"module","externalDependencies":[]}