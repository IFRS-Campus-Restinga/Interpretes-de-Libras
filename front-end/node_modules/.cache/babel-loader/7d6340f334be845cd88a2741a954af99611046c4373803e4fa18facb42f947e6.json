{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nconst VISITED_ROUTE_KEYS = Symbol('VISITED_ROUTE_KEYS');\nexport const shouldPreventRemove = (emitter, beforeRemoveListeners, currentRoutes, nextRoutes, action) => {\n  const nextRouteKeys = nextRoutes.map(route => route.key);\n\n  // Call these in reverse order so last screens handle the event first\n  const removedRoutes = currentRoutes.filter(route => !nextRouteKeys.includes(route.key)).reverse();\n  const visitedRouteKeys =\n  // @ts-expect-error: add this property to mark that we've already emitted this action\n  action[VISITED_ROUTE_KEYS] ?? new Set();\n  const beforeRemoveAction = {\n    ...action,\n    [VISITED_ROUTE_KEYS]: visitedRouteKeys\n  };\n  for (const route of removedRoutes) {\n    var _beforeRemoveListener;\n    if (visitedRouteKeys.has(route.key)) {\n      // Skip if we've already emitted this action for this screen\n      continue;\n    }\n\n    // First, we need to check if any child screens want to prevent it\n    const isPrevented = (_beforeRemoveListener = beforeRemoveListeners[route.key]) === null || _beforeRemoveListener === void 0 ? void 0 : _beforeRemoveListener.call(beforeRemoveListeners, beforeRemoveAction);\n    if (isPrevented) {\n      return true;\n    }\n    visitedRouteKeys.add(route.key);\n    const event = emitter.emit({\n      type: 'beforeRemove',\n      target: route.key,\n      data: {\n        action: beforeRemoveAction\n      },\n      canPreventDefault: true\n    });\n    if (event.defaultPrevented) {\n      return true;\n    }\n  }\n  return false;\n};\nexport default function useOnPreventRemove(_ref) {\n  let {\n    getState,\n    emitter,\n    beforeRemoveListeners\n  } = _ref;\n  const {\n    addKeyedListener\n  } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const routeKey = route === null || route === void 0 ? void 0 : route.key;\n  React.useEffect(() => {\n    if (routeKey) {\n      return addKeyedListener === null || addKeyedListener === void 0 ? void 0 : addKeyedListener('beforeRemove', routeKey, action => {\n        const state = getState();\n        return shouldPreventRemove(emitter, beforeRemoveListeners, state.routes, [], action);\n      });\n    }\n  }, [addKeyedListener, beforeRemoveListeners, emitter, getState, routeKey]);\n}","map":{"version":3,"names":["React","NavigationBuilderContext","NavigationRouteContext","VISITED_ROUTE_KEYS","Symbol","shouldPreventRemove","emitter","beforeRemoveListeners","currentRoutes","nextRoutes","action","nextRouteKeys","map","route","key","removedRoutes","filter","includes","reverse","visitedRouteKeys","Set","beforeRemoveAction","_beforeRemoveListener","has","isPrevented","call","add","event","emit","type","target","data","canPreventDefault","defaultPrevented","useOnPreventRemove","_ref","getState","addKeyedListener","useContext","routeKey","useEffect","state","routes"],"sources":["C:/Users/marci/Interpretes-de-Libras-2/node_modules/@react-navigation/core/lib/module/useOnPreventRemove.js"],"sourcesContent":["import * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nconst VISITED_ROUTE_KEYS = Symbol('VISITED_ROUTE_KEYS');\nexport const shouldPreventRemove = (emitter, beforeRemoveListeners, currentRoutes, nextRoutes, action) => {\n  const nextRouteKeys = nextRoutes.map(route => route.key);\n\n  // Call these in reverse order so last screens handle the event first\n  const removedRoutes = currentRoutes.filter(route => !nextRouteKeys.includes(route.key)).reverse();\n  const visitedRouteKeys =\n  // @ts-expect-error: add this property to mark that we've already emitted this action\n  action[VISITED_ROUTE_KEYS] ?? new Set();\n  const beforeRemoveAction = {\n    ...action,\n    [VISITED_ROUTE_KEYS]: visitedRouteKeys\n  };\n  for (const route of removedRoutes) {\n    var _beforeRemoveListener;\n    if (visitedRouteKeys.has(route.key)) {\n      // Skip if we've already emitted this action for this screen\n      continue;\n    }\n\n    // First, we need to check if any child screens want to prevent it\n    const isPrevented = (_beforeRemoveListener = beforeRemoveListeners[route.key]) === null || _beforeRemoveListener === void 0 ? void 0 : _beforeRemoveListener.call(beforeRemoveListeners, beforeRemoveAction);\n    if (isPrevented) {\n      return true;\n    }\n    visitedRouteKeys.add(route.key);\n    const event = emitter.emit({\n      type: 'beforeRemove',\n      target: route.key,\n      data: {\n        action: beforeRemoveAction\n      },\n      canPreventDefault: true\n    });\n    if (event.defaultPrevented) {\n      return true;\n    }\n  }\n  return false;\n};\nexport default function useOnPreventRemove(_ref) {\n  let {\n    getState,\n    emitter,\n    beforeRemoveListeners\n  } = _ref;\n  const {\n    addKeyedListener\n  } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const routeKey = route === null || route === void 0 ? void 0 : route.key;\n  React.useEffect(() => {\n    if (routeKey) {\n      return addKeyedListener === null || addKeyedListener === void 0 ? void 0 : addKeyedListener('beforeRemove', routeKey, action => {\n        const state = getState();\n        return shouldPreventRemove(emitter, beforeRemoveListeners, state.routes, [], action);\n      });\n    }\n  }, [addKeyedListener, beforeRemoveListeners, emitter, getState, routeKey]);\n}\n//# sourceMappingURL=useOnPreventRemove.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}