{"ast":null,"code":"import { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache(_ref) {\n  let {\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter\n  } = _ref;\n  const {\n    stackRef\n  } = React.useContext(NavigationBuilderContext);\n\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(() => ({\n    current: {}\n  }),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [getState, navigation, setOptions, router, emitter]);\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions\n  };\n  cache.current = state.routes.reduce((acc, route) => {\n    const previous = cache.current[route.key];\n    if (previous) {\n      // If a cached navigation object already exists, reuse it\n      acc[route.key] = previous;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {\n        emit,\n        ...rest\n      } = navigation;\n      const dispatch = thunk => {\n        const action = typeof thunk === 'function' ? thunk(getState()) : thunk;\n        if (action != null) {\n          navigation.dispatch({\n            source: route.key,\n            ...action\n          });\n        }\n      };\n      const withStack = callback => {\n        let isStackSet = false;\n        try {\n          if (process.env.NODE_ENV !== 'production' && stackRef && !stackRef.current) {\n            // Capture the stack trace for devtools\n            stackRef.current = new Error().stack;\n            isStackSet = true;\n          }\n          callback();\n        } finally {\n          if (isStackSet && stackRef) {\n            stackRef.current = undefined;\n          }\n        }\n      };\n      const helpers = Object.keys(actions).reduce((acc, name) => {\n        acc[name] = function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          return withStack(() =>\n          // @ts-expect-error: name is a valid key, but TypeScript is dumb\n          dispatch(actions[name](...args)));\n        };\n        return acc;\n      }, {});\n      acc[route.key] = {\n        ...rest,\n        ...helpers,\n        // FIXME: too much work to fix the types for now\n        ...emitter.create(route.key),\n        dispatch: thunk => withStack(() => dispatch(thunk)),\n        getParent: id => {\n          if (id !== undefined && id === rest.getId()) {\n            // If the passed id is the same as the current navigation id,\n            // we return the cached navigation object for the relevant route\n            return acc[route.key];\n          }\n          return rest.getParent(id);\n        },\n        setOptions: options => setOptions(o => ({\n          ...o,\n          [route.key]: {\n            ...o[route.key],\n            ...options\n          }\n        })),\n        isFocused: () => {\n          const state = getState();\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n\n          // If the current screen is focused, we also need to check if parent navigator is focused\n          // This makes sure that we return the focus state in the whole tree, not just this navigator\n          return navigation ? navigation.isFocused() : true;\n        }\n      };\n    }\n    return acc;\n  }, {});\n  return cache.current;\n}","map":{"version":3,"names":["CommonActions","React","NavigationBuilderContext","useNavigationCache","_ref","state","getState","navigation","setOptions","router","emitter","stackRef","useContext","cache","useMemo","current","actions","actionCreators","routes","reduce","acc","route","previous","key","emit","rest","dispatch","thunk","action","source","withStack","callback","isStackSet","process","env","NODE_ENV","Error","stack","undefined","helpers","Object","keys","name","_len","arguments","length","args","Array","_key","create","getParent","id","getId","options","o","isFocused","index"],"sources":["C:/Users/marci/Interpretes-de-Libras-2/node_modules/@react-navigation/core/lib/module/useNavigationCache.js"],"sourcesContent":["import { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache(_ref) {\n  let {\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter\n  } = _ref;\n  const {\n    stackRef\n  } = React.useContext(NavigationBuilderContext);\n\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(() => ({\n    current: {}\n  }),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [getState, navigation, setOptions, router, emitter]);\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions\n  };\n  cache.current = state.routes.reduce((acc, route) => {\n    const previous = cache.current[route.key];\n    if (previous) {\n      // If a cached navigation object already exists, reuse it\n      acc[route.key] = previous;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {\n        emit,\n        ...rest\n      } = navigation;\n      const dispatch = thunk => {\n        const action = typeof thunk === 'function' ? thunk(getState()) : thunk;\n        if (action != null) {\n          navigation.dispatch({\n            source: route.key,\n            ...action\n          });\n        }\n      };\n      const withStack = callback => {\n        let isStackSet = false;\n        try {\n          if (process.env.NODE_ENV !== 'production' && stackRef && !stackRef.current) {\n            // Capture the stack trace for devtools\n            stackRef.current = new Error().stack;\n            isStackSet = true;\n          }\n          callback();\n        } finally {\n          if (isStackSet && stackRef) {\n            stackRef.current = undefined;\n          }\n        }\n      };\n      const helpers = Object.keys(actions).reduce((acc, name) => {\n        acc[name] = function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          return withStack(() =>\n          // @ts-expect-error: name is a valid key, but TypeScript is dumb\n          dispatch(actions[name](...args)));\n        };\n        return acc;\n      }, {});\n      acc[route.key] = {\n        ...rest,\n        ...helpers,\n        // FIXME: too much work to fix the types for now\n        ...emitter.create(route.key),\n        dispatch: thunk => withStack(() => dispatch(thunk)),\n        getParent: id => {\n          if (id !== undefined && id === rest.getId()) {\n            // If the passed id is the same as the current navigation id,\n            // we return the cached navigation object for the relevant route\n            return acc[route.key];\n          }\n          return rest.getParent(id);\n        },\n        setOptions: options => setOptions(o => ({\n          ...o,\n          [route.key]: {\n            ...o[route.key],\n            ...options\n          }\n        })),\n        isFocused: () => {\n          const state = getState();\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n\n          // If the current screen is focused, we also need to check if parent navigator is focused\n          // This makes sure that we return the focus state in the whole tree, not just this navigator\n          return navigation ? navigation.isFocused() : true;\n        }\n      };\n    }\n    return acc;\n  }, {});\n  return cache.current;\n}\n//# sourceMappingURL=useNavigationCache.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}