{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport PreventRemoveContext from './PreventRemoveContext';\n/**\n * Util function to transform map of prevented routes to a simpler object.\n */\nconst transformPreventedRoutes = preventedRoutesMap => {\n  const preventedRoutesToTransform = [...preventedRoutesMap.values()];\n  const preventedRoutes = preventedRoutesToTransform.reduce((acc, _ref) => {\n    var _acc$routeKey;\n    let {\n      routeKey,\n      preventRemove\n    } = _ref;\n    acc[routeKey] = {\n      preventRemove: ((_acc$routeKey = acc[routeKey]) === null || _acc$routeKey === void 0 ? void 0 : _acc$routeKey.preventRemove) || preventRemove\n    };\n    return acc;\n  }, {});\n  return preventedRoutes;\n};\n\n/**\n * Component used for managing which routes have to be prevented from removal in native-stack.\n */\nexport default function PreventRemoveProvider(_ref2) {\n  let {\n    children\n  } = _ref2;\n  const [parentId] = React.useState(() => nanoid());\n  const [preventedRoutesMap, setPreventedRoutesMap] = React.useState(new Map());\n  const navigation = React.useContext(NavigationHelpersContext);\n  const route = React.useContext(NavigationRouteContext);\n  const preventRemoveContextValue = React.useContext(PreventRemoveContext);\n  // take `setPreventRemove` from parent context - if exist it means we're in a nested context\n  const setParentPrevented = preventRemoveContextValue === null || preventRemoveContextValue === void 0 ? void 0 : preventRemoveContextValue.setPreventRemove;\n  const setPreventRemove = useLatestCallback((id, routeKey, preventRemove) => {\n    if (preventRemove && (navigation == null || navigation !== null && navigation !== void 0 && navigation.getState().routes.every(route => route.key !== routeKey))) {\n      throw new Error(`Couldn't find a route with the key ${routeKey}. Is your component inside NavigationContent?`);\n    }\n    setPreventedRoutesMap(prevPrevented => {\n      var _prevPrevented$get, _prevPrevented$get2;\n      // values haven't changed - do nothing\n      if (routeKey === ((_prevPrevented$get = prevPrevented.get(id)) === null || _prevPrevented$get === void 0 ? void 0 : _prevPrevented$get.routeKey) && preventRemove === ((_prevPrevented$get2 = prevPrevented.get(id)) === null || _prevPrevented$get2 === void 0 ? void 0 : _prevPrevented$get2.preventRemove)) {\n        return prevPrevented;\n      }\n      const nextPrevented = new Map(prevPrevented);\n      if (preventRemove) {\n        nextPrevented.set(id, {\n          routeKey,\n          preventRemove\n        });\n      } else {\n        nextPrevented.delete(id);\n      }\n      return nextPrevented;\n    });\n  });\n  const isPrevented = [...preventedRoutesMap.values()].some(_ref3 => {\n    let {\n      preventRemove\n    } = _ref3;\n    return preventRemove;\n  });\n  React.useEffect(() => {\n    if ((route === null || route === void 0 ? void 0 : route.key) !== undefined && setParentPrevented !== undefined) {\n      // when route is defined (and setParentPrevented) it means we're in a nested stack\n      // route.key then will be the route key of parent\n      setParentPrevented(parentId, route.key, isPrevented);\n      return () => {\n        setParentPrevented(parentId, route.key, false);\n      };\n    }\n    return;\n  }, [parentId, isPrevented, route === null || route === void 0 ? void 0 : route.key, setParentPrevented]);\n  const value = React.useMemo(() => ({\n    setPreventRemove,\n    preventedRoutes: transformPreventedRoutes(preventedRoutesMap)\n  }), [setPreventRemove, preventedRoutesMap]);\n  return /*#__PURE__*/React.createElement(PreventRemoveContext.Provider, {\n    value: value\n  }, children);\n}","map":{"version":3,"names":["nanoid","React","useLatestCallback","NavigationHelpersContext","NavigationRouteContext","PreventRemoveContext","transformPreventedRoutes","preventedRoutesMap","preventedRoutesToTransform","values","preventedRoutes","reduce","acc","_ref","_acc$routeKey","routeKey","preventRemove","PreventRemoveProvider","_ref2","children","parentId","useState","setPreventedRoutesMap","Map","navigation","useContext","route","preventRemoveContextValue","setParentPrevented","setPreventRemove","id","getState","routes","every","key","Error","prevPrevented","_prevPrevented$get","_prevPrevented$get2","get","nextPrevented","set","delete","isPrevented","some","_ref3","useEffect","undefined","value","useMemo","createElement","Provider"],"sources":["C:/Users/marci/Interpretes-de-Libras-2/node_modules/@react-navigation/core/lib/module/PreventRemoveProvider.js"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport PreventRemoveContext from './PreventRemoveContext';\n/**\n * Util function to transform map of prevented routes to a simpler object.\n */\nconst transformPreventedRoutes = preventedRoutesMap => {\n  const preventedRoutesToTransform = [...preventedRoutesMap.values()];\n  const preventedRoutes = preventedRoutesToTransform.reduce((acc, _ref) => {\n    var _acc$routeKey;\n    let {\n      routeKey,\n      preventRemove\n    } = _ref;\n    acc[routeKey] = {\n      preventRemove: ((_acc$routeKey = acc[routeKey]) === null || _acc$routeKey === void 0 ? void 0 : _acc$routeKey.preventRemove) || preventRemove\n    };\n    return acc;\n  }, {});\n  return preventedRoutes;\n};\n\n/**\n * Component used for managing which routes have to be prevented from removal in native-stack.\n */\nexport default function PreventRemoveProvider(_ref2) {\n  let {\n    children\n  } = _ref2;\n  const [parentId] = React.useState(() => nanoid());\n  const [preventedRoutesMap, setPreventedRoutesMap] = React.useState(new Map());\n  const navigation = React.useContext(NavigationHelpersContext);\n  const route = React.useContext(NavigationRouteContext);\n  const preventRemoveContextValue = React.useContext(PreventRemoveContext);\n  // take `setPreventRemove` from parent context - if exist it means we're in a nested context\n  const setParentPrevented = preventRemoveContextValue === null || preventRemoveContextValue === void 0 ? void 0 : preventRemoveContextValue.setPreventRemove;\n  const setPreventRemove = useLatestCallback((id, routeKey, preventRemove) => {\n    if (preventRemove && (navigation == null || navigation !== null && navigation !== void 0 && navigation.getState().routes.every(route => route.key !== routeKey))) {\n      throw new Error(`Couldn't find a route with the key ${routeKey}. Is your component inside NavigationContent?`);\n    }\n    setPreventedRoutesMap(prevPrevented => {\n      var _prevPrevented$get, _prevPrevented$get2;\n      // values haven't changed - do nothing\n      if (routeKey === ((_prevPrevented$get = prevPrevented.get(id)) === null || _prevPrevented$get === void 0 ? void 0 : _prevPrevented$get.routeKey) && preventRemove === ((_prevPrevented$get2 = prevPrevented.get(id)) === null || _prevPrevented$get2 === void 0 ? void 0 : _prevPrevented$get2.preventRemove)) {\n        return prevPrevented;\n      }\n      const nextPrevented = new Map(prevPrevented);\n      if (preventRemove) {\n        nextPrevented.set(id, {\n          routeKey,\n          preventRemove\n        });\n      } else {\n        nextPrevented.delete(id);\n      }\n      return nextPrevented;\n    });\n  });\n  const isPrevented = [...preventedRoutesMap.values()].some(_ref3 => {\n    let {\n      preventRemove\n    } = _ref3;\n    return preventRemove;\n  });\n  React.useEffect(() => {\n    if ((route === null || route === void 0 ? void 0 : route.key) !== undefined && setParentPrevented !== undefined) {\n      // when route is defined (and setParentPrevented) it means we're in a nested stack\n      // route.key then will be the route key of parent\n      setParentPrevented(parentId, route.key, isPrevented);\n      return () => {\n        setParentPrevented(parentId, route.key, false);\n      };\n    }\n    return;\n  }, [parentId, isPrevented, route === null || route === void 0 ? void 0 : route.key, setParentPrevented]);\n  const value = React.useMemo(() => ({\n    setPreventRemove,\n    preventedRoutes: transformPreventedRoutes(preventedRoutesMap)\n  }), [setPreventRemove, preventedRoutesMap]);\n  return /*#__PURE__*/React.createElement(PreventRemoveContext.Provider, {\n    value: value\n  }, children);\n}\n//# sourceMappingURL=PreventRemoveProvider.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}